// Generated by CoffeeScript 1.12.7
(function() {
  var accept_invite, decrypt, encrypt, get_invite_text, invite_msg, publ, rsa;

  rsa = new RSAKey();

  publ = new RSAKey();

  Math.seedrandom('password');

  rsa.generate(2048, '10001');

  Math.seedrandom((new Date()).toString());

  window.sjcl = sjcl;

  window.cipher_accepted = false;

  invite_msg = "Данный пользователь предложил Вам шифровать\n вашу переписку с помощью расширения vkSafe";

  encrypt = function(text) {
    var enc_key, key;
    key = JSON.stringify(sjcl.random.randomWords(3));
    enc_key = publ.encrypt(key);
    if (enc_key) {
      return "------ MESSAGE ------\n" + (linebrk(enc_key, 32)) + "\n------ MESSAGE BODY ------\n" + (linebrk(sjcl.encrypt(key, text), 32)) + "\n------ END MESSAGE ------";
    }
  };

  decrypt = function(text) {
    var enc_key, enc_msg, i, j, k, key, key_line, l, len, len1, len2, line, msg_line, raw, ref, ref1;
    raw = text.split('\n');
    for (i = j = 0, len = raw.length; j < len; i = ++j) {
      line = raw[i];
      if (line === '------ MESSAGE BODY ------') {
        enc_key = '';
        ref = raw.slice(1, i);
        for (k = 0, len1 = ref.length; k < len1; k++) {
          key_line = ref[k];
          enc_key += key_line;
        }
        enc_msg = '';
        ref1 = raw.slice(i + 1, -1);
        for (l = 0, len2 = ref1.length; l < len2; l++) {
          msg_line = ref1[l];
          enc_msg += msg_line;
        }
      }
    }
    key = rsa.decrypt(enc_key);
    return sjcl.decrypt(key, enc_msg);
  };

  get_invite_text = function() {
    return "------ INVITE ------\n" + invite_msg + "\n------ INVITE BODY ------\n" + (linebrk(rsa.n.toString(16), 32)) + "\n------ END INVITE ------";
  };

  accept_invite = function(invite) {
    var i, j, k, key, key_line, len, len1, line, raw, ref;
    raw = invite.split('\n');
    for (i = j = 0, len = raw.length; j < len; i = ++j) {
      line = raw[i];
      if (line === '------ INVITE BODY ------') {
        key = '';
        ref = raw.slice(i + 1, -1);
        for (k = 0, len1 = ref.length; k < len1; k++) {
          key_line = ref[k];
          key += key_line;
        }
      }
    }
    publ.setPublic(key, rsa.e.toString(16));
    return window.cipher_accepted = true;
  };

  window.encrypt = encrypt;

  window.decrypt = decrypt;

  window.get_invite_text = get_invite_text;

  window.accept_invite = accept_invite;

}).call(this);

//# sourceMappingURL=vk_safe.js.map
