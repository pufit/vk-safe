// Generated by CoffeeScript 1.12.7
(function() {
  var accept_invite, add_button, button_click_text, decrypt, dump_to_storage, encrypt, generate_key, generate_safe_form, get_id, get_invite_text, handler, history_on_update, init, invite_msg, load_from_storage, loc, parse_url, safe_send, send, send_invite,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ({
    'vkSafeEXT': {
      '<id>': {
        'public_key': '<public_key>',
        'secret_key': '<secret_key>'
      }
    }
  });

  "vkSafe();\n\nvar loc = location.href;\nsetInterval(function(){\n    if (location.href !== loc){\n        loc = location.href;\n        var b = $('.vkSafeButton');\n        if (b){\n            b.remove()\n        }\n        vkSafe();\n        console.log(loc)\n    }\n}, 100);";

  window.sjcl = sjcl;

  invite_msg = "Данный пользователь предложил Вам шифровать\n вашу переписку с помощью расширения vkSafe https://github.com/pufit/vk-safe";

  button_click_text = "Введите пароль для шифрования переписки. НИКОМУ ЕГО НЕ ГОВОРИТЕ!";

  String.prototype.trim = function() {
    return String(this).replace(/^\s+|\s+$/g, '');
  };

  parse_url = function(href) {
    var match;
    match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
      protocol: match[1],
      host: match[2],
      hostname: match[3],
      port: match[4],
      pathname: match[5],
      search: match[6],
      hash: match[7]
    };
  };

  get_id = function() {
    var res;
    res = parse_url(location.href)['search'].match(/sel=[0-9]+/);
    if (res) {
      return res[0].split('=')[1];
    }
  };

  generate_key = function() {
    var password;
    password = '';
    while (!password) {
      password = prompt(button_click_text, '');
    }
    password += id;
    Math.seedrandom(password);
    rsa.generate(1024, '10001');
    Math.seedrandom((new Date()).toString());
    return dump_to_storage();
  };

  load_from_storage = (function(_this) {
    return function() {
      var body, p, s;
      body = JSON.parse(localStorage.getItem('vkSafeEXT'));
      if (!body) {
        return false;
      }
      if (!body[id]) {
        return false;
      }
      p = body[id]['public'];
      s = body[id]['private'];
      if (p) {
        publ.setPublic(p[0], p[1]);
      }
      if (s) {
        rsa.setPrivate(s[0], s[1], s[2]);
      }
      _this.is_safe = body[id]['isSafe'];
      _this.waiting_for_secure = body[id]['waitingForSecure'];
      if (s || p) {
        return true;
      }
    };
  })(this);

  dump_to_storage = function() {
    var body;
    body = localStorage.getItem('vkSafeEXT') ? JSON.parse(localStorage.getItem('vkSafeEXT')) : {};
    if (!body[id]) {
      body[id] = {
        isSafe: false,
        waitingForSecure: false
      };
    }
    if (publ.n) {
      body[id]['public'] = [publ.n.toString(16), publ.e.toString(16)];
    }
    if (rsa.n) {
      body[id]['private'] = [rsa.n.toString(16), rsa.e.toString(16), rsa.d.toString(16)];
    }
    body[id]['isSafe'] = is_safe;
    body[id]['waitingForSecure'] = waiting_for_secure;
    return localStorage.setItem('vkSafeEXT', JSON.stringify(body));
  };

  encrypt = function(text) {
    var enc_key, key;
    key = JSON.stringify(sjcl.random.randomWords(3));
    enc_key = publ.encrypt(key);
    if (enc_key) {
      return "|MESSAGE|\n " + (linebrk(enc_key, 32)) + "\n |KEY FOR SENDER|\n " + (linebrk(rsa.encrypt(key), 32)) + "\n |MESSAGE BODY|\n " + (linebrk(sjcl.encrypt(key, text.trim()), 32)) + "\n |END MESSAGE|";
    }
  };

  decrypt = function(text, self) {
    var enc_key, enc_msg, key, line, raw;
    raw = (function() {
      var i, len, ref, results;
      ref = text.split('|');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push(line.trim());
      }
      return results;
    })();
    if (!self) {
      enc_key = raw.slice(raw.indexOf('MESSAGE') + 1, raw.indexOf('KEY FOR SENDER'))[0].replace(/\s|\n/g, '');
    } else {
      enc_key = raw.slice(raw.indexOf('KEY FOR SENDER') + 1, raw.indexOf('MESSAGE BODY'));
    }
    enc_key = enc_key[0].replace(/\ /g, '');
    enc_msg = raw.slice(raw.indexOf('MESSAGE BODY') + 1, raw.indexOf('END MESSAGE'))[0].replace(/\s|\n/g, '');
    key = rsa.decrypt(enc_key);
    return sjcl.decrypt(key, enc_msg);
  };

  get_invite_text = function() {
    return "|INVITE|\n " + invite_msg + "\n |INVITE BODY|\n " + (linebrk(rsa.n.toString(16), 32)) + "\n |END INVITE|";
  };

  accept_invite = (function(_this) {
    return function(invite) {
      var b, key, line, raw;
      raw = (function() {
        var i, len, ref, results;
        ref = invite.split('|');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          line = ref[i];
          results.push(line.trim());
        }
        return results;
      })();
      key = raw.slice(raw.indexOf('INVITE BODY') + 1, raw.indexOf('END INVITE'))[0].replace(/\s|\n/g, '');
      publ.setPublic(key, rsa.e.toString(16));
      _this.is_safe = true;
      b = $('.vkSafeButton');
      if (b) {
        b.remove();
      }
      dump_to_storage();
      return true;
    };
  })(this);

  history_on_update = function() {
    var i, len, message, messages, ref, results, self;
    if (loc !== location.href) {
      return;
    }
    messages = $('._im_mess');
    results = [];
    for (i = 0, len = messages.length; i < len; i++) {
      message = messages[i];
      if (ref = message.dataset['msgid'], indexOf.call(processed, ref) < 0) {
        self = message.parentElement.parentElement.children[0].innerText.trim().split(' ')[0] === $('.top_profile_name').html();
        processed.push(message.dataset['msgid']);
        if (message.children[2].innerText) {
          results.push(handler(message.children[2], self));
        } else {
          results.push(handler(message.children[0], self));
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  handler = (function(_this) {
    return function(message, self) {
      var content, line;
      content = (function() {
        var i, len, ref, results;
        ref = message.innerText.split('|');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          line = ref[i];
          results.push(line.trim());
        }
        return results;
      })();
      if (content[1] === 'INVITE') {
        if (!_this.is_safe && !self) {
          if (!_this.waiting_for_secure && confirm('Пользователь отправил заявку на шифрование переписки. Принять её?')) {
            generate_key();
            generate_safe_form();
            send_invite();
          }
          accept_invite(message.textContent);
        }
        if (self) {
          message.innerText = '[vkSafe] Заявка на шифрование отправлена.';
          return;
        }
        message.innerText = '[vkSafe] Заявка на шифрование';
        return;
      }
      if (content[1] === 'MESSAGE') {
        try {
          message.innerText = decrypt(message.innerText, self);
          return message.style.backgroundColor = 'rgba(0, 255, 0, 0.2)';
        } catch (error) {
          message.style.backgroundColor = 'rgba(255, 0, 0, 0.2)';
          return message.innerText = '[vkSafe] Не удалось дешифровать сообщение';
        }
      }
    };
  })(this);

  safe_send = function() {
    if (!safe_field.html()) {
      return;
    }
    text_field.html(encrypt(safe_field.html()));
    $('._im_send').click();
    return setTimeout(function() {
      return text_field.html('');
    }, 100);
  };

  send = function() {
    if (!safe_field.html()) {
      return;
    }
    text_field.html(safe_field.html());
    $('._im_send').click();
    return setTimeout(function() {
      return text_field.html('');
    }, 100);
  };

  send_invite = (function(_this) {
    return function() {
      _this.waiting_for_secure = true;
      dump_to_storage();
      text_field.html(get_invite_text());
      $('._im_send').click();
      return setTimeout(function() {
        return text_field.html('');
      }, 100);
    };
  })(this);

  generate_safe_form = (function(_this) {
    return function() {
      if ($('.vkSafeField').length) {
        return;
      }
      _this.safe_field = $('._im_text');
      _this.text_field = _this.safe_field.clone();
      _this.text_field.css({
        'display': 'none'
      });
      $('._im_text_wrap').append(_this.text_field);
      setTimeout(function() {
        return $('.placeholder').css({
          'display': 'none'
        });
      }, 3000);
      _this.safe_field.removeClass('_im_text');
      _this.safe_field.addClass('vkSafeField');
      return _this.safe_field.keydown(function(e) {
        if (e.keyCode === 13) {
          if (is_safe) {
            safe_send();
          } else {
            send();
          }
          return false;
        }
      });
    };
  })(this);

  add_button = function() {
    var button;
    button = document.createElement('button');
    button.innerHTML = 'Шифровать переписку';
    button.style.position = 'absolute';
    button.style.left = 0;
    button.style.bottom = '40px';
    button.className = 'vkSafeButton';
    button.onclick = function() {
      generate_key();
      generate_safe_form();
      return send_invite();
    };
    return $('.side_bar').append(button);
  };

  init = (function(_this) {
    return function() {
      _this.rsa = new RSAKey();
      _this.publ = new RSAKey();
      _this.processed = [];
      _this.is_safe = false;
      _this.ext_started = true;
      _this.waiting_for_secure = false;
      _this.id = get_id();
      if (!id) {
        return;
      }
      load_from_storage();
      if (is_safe) {
        generate_safe_form();
      }
      _this.vk_history = $('._im_peer_history');
      _this.vk_history.bind('DOMSubtreeModified', history_on_update);
      if (!is_safe && !waiting_for_secure) {
        add_button();
      }
      window.processed = processed;
      window.generate_safe_form = generate_safe_form;
      window.safe_send = safe_send;
      window.encrypt = encrypt;
      window.decrypt = decrypt;
      window.get_invite_text = get_invite_text;
      window.accept_invite = accept_invite;
      window.parse_url = parse_url;
      window.generate_key = generate_key;
      window.load_from_storage = load_from_storage;
      window.rsa = rsa;
      return window.publ = publ;
    };
  })(this);

  window.init = init;

  window.history_on_update = history_on_update;

  init();

  loc = location.href;

  setInterval(function() {
    var b;
    if (location.href !== loc) {
      loc = location.href;
      b = $('.vkSafeButton');
      if (window.vk_history) {
        vk_history.unbind('DOMSubtreeModified', history_on_update);
      }
      if (b) {
        b.remove();
      }
      init();
      if (is_safe) {
        history_on_update();
      }
      return console.log(loc);
    }
  }, 100);

}).call(this);

//# sourceMappingURL=vk_safe.js.map
