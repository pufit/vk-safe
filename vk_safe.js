// Generated by CoffeeScript 1.12.7
(function() {
  var accept_invite, decrypt, encrypt, generate_key, generate_safe_form, get_id, get_invite_text, handler, history, history_on_update, invite_msg, is_safe, on_url_change, parse_url, processed, publ, rsa, safe_send, secure_id,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  rsa = new RSAKey();

  publ = new RSAKey();

  window.sjcl = sjcl;

  invite_msg = "Данный пользователь предложил Вам шифровать\n вашу переписку с помощью расширения vkSafe";

  String.prototype.trim = function() {
    return String(this).replace(/^\s+|\s+$/g, '');
  };

  generate_key = function(password) {
    Math.seedrandom(password);
    rsa.generate(1024, '10001');
    Math.seedrandom((new Date()).toString());
    return localStorage.setItem('vkSafeEXT-private', JSON.stringify([rsa.n.toString(16), rsa.d.toString(16), rsa.e.toString(16)]));
  };

  encrypt = function(text) {
    var enc_key, key;
    key = JSON.stringify(sjcl.random.randomWords(3));
    enc_key = publ.encrypt(key);
    if (enc_key) {
      return "|MESSAGE|\n " + (linebrk(enc_key, 32)) + "\n |KEY FOR SENDER|\n " + (linebrk(rsa.encrypt(key), 32)) + "\n |MESSAGE BODY|\n " + (linebrk(sjcl.encrypt(key, text.trim()), 32)) + "\n |END MESSAGE|";
    }
  };

  decrypt = function(text, self) {
    var enc_key, enc_msg, key, line, raw;
    raw = (function() {
      var i, len, ref, results;
      ref = text.split('|');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push(line.trim());
      }
      return results;
    })();
    if (!self) {
      enc_key = raw.slice(raw.indexOf('MESSAGE') + 1, raw.indexOf('KEY FOR SENDER'))[0].replace(/\s|\n/g, '');
    } else {
      enc_key = raw.slice(raw.indexOf('KEY FOR SENDER') + 1, raw.indexOf('MESSAGE BODY'));
    }
    enc_key = enc_key[0].replace(/\ /g, '');
    enc_msg = raw.slice(raw.indexOf('MESSAGE BODY') + 1, raw.indexOf('END MESSAGE'))[0].replace(/\s|\n/g, '');
    key = rsa.decrypt(enc_key);
    return sjcl.decrypt(key, enc_msg);
  };

  get_invite_text = function() {
    return "|INVITE|\n " + invite_msg + "\n |INVITE BODY|\n " + (linebrk(rsa.n.toString(16), 32)) + "\n |END INVITE|";
  };

  accept_invite = function(invite) {
    var key, line, raw;
    raw = (function() {
      var i, len, ref, results;
      ref = invite.split('|');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push(line.trim());
      }
      return results;
    })();
    key = raw.slice(raw.indexOf('INVITE BODY') + 1, raw.indexOf('END INVITE'))[0].replace(/\s|\n/g, '');
    publ.setPublic(key, rsa.e.toString(16));
    localStorage.setItem('vkSafeEXT-public', JSON.stringify([key, rsa.e.toString(16)]));
    return true;
  };

  parse_url = function(href) {
    var match;
    match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match && {
      protocol: match[1],
      host: match[2],
      hostname: match[3],
      port: match[4],
      pathname: match[5],
      search: match[6],
      hash: match[7]
    };
  };

  get_id = function() {
    return parse_url(location.href)['search'].match(/sel=[0-9]+/)[0].split('=')[1];
  };

  history_on_update = function() {
    var i, len, message, messages, ref, results, self;
    messages = $('._im_mess');
    results = [];
    for (i = 0, len = messages.length; i < len; i++) {
      message = messages[i];
      if (ref = message.dataset['msgid'], indexOf.call(processed, ref) < 0) {
        self = message.parentElement.parentElement.children[0].innerText.trim().split(' ')[0] === $('.top_profile_name').html();
        processed.push(message.dataset['msgid']);
        if (message.children[2].innerText) {
          results.push(handler(message.children[2], self));
        } else {
          results.push(handler(message.children[0], self));
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  handler = function(message, self) {
    var content, line;
    if (!is_safe) {
      return;
    }
    content = (function() {
      var i, len, ref, results;
      ref = message.innerText.split('|');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        results.push(line.trim());
      }
      return results;
    })();
    if (content[1] === 'MESSAGE') {
      return message.innerText = '[Защищено] ' + decrypt(message.innerText, self);
    } else if (content[1] === 'INVITE') {
      message.innerText = '[vkSafe] Заявка на шифрование принята';
      return accept_invite(message.textContent);
    }
  };

  safe_send = function() {
    if (!safe_field.html()) {
      return;
    }
    text_field.html(encrypt(safe_field.html()));
    $('._im_send').click();
    return setTimeout(function() {
      return text_field.html('');
    }, 100);
  };

  generate_safe_form = function() {
    var safe_field, text_field;
    safe_field = $('._im_text');
    text_field = safe_field.clone();
    text_field.css({
      'display': 'none'
    });
    $('._im_text_wrap').append(text_field);
    safe_field.removeClass('_im_text');
    safe_field.addClass('vkSafeField');
    safe_field.keydown(function(e) {
      $('.placeholder').css({
        'display': 'none'
      });
      if (e.keyCode === 13) {
        safe_send();
        return false;
      }
    });
    window.text_field = text_field;
    return window.safe_field = safe_field;
  };

  on_url_change = function() {
    var id;
    id = get_id();
    if (!id || indexOf.call(id, secure_id) < 0) {

    }
  };

  processed = [];

  is_safe = true;

  if (localStorage.getItem('vkSafeSecureId')) {
    secure_id = JSON.parse(localStorage.getItem('vkSafeSecureId'));
  } else {
    localStorage.setItem('vkSafeSecureId', '[]');
    secure_id = [];
  }

  history = $('._im_peer_history');

  history.bind('DOMSubtreeModified', function() {
    return history_on_update();
  });

  generate_key('test');

  accept_invite(get_invite_text());

  generate_safe_form();

  window.processed = processed;

  window.generate_safe_form = generate_safe_form;

  window.safe_send = safe_send;

  window.encrypt = encrypt;

  window.decrypt = decrypt;

  window.get_invite_text = get_invite_text;

  window.accept_invite = accept_invite;

  window.parse_url = parse_url;

  window.generate_key = generate_key;

}).call(this);

//# sourceMappingURL=vk_safe.js.map
